"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=c(r),m=a,d=f["".concat(l,".").concat(m)]||f[m]||u[m]||o;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4321:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],s={sidebar_position:3},l="Experimental Software",c={unversionedId:"software/experimental",id:"software/experimental",title:"Experimental Software",description:"DiffPHC",source:"@site/docs/software/experimental.md",sourceDirName:"software",slug:"/software/experimental",permalink:"/docs/software/experimental",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Clientgen",permalink:"/docs/software/clientgen"}},p={},u=[{value:"DiffPHC",id:"diffphc",level:2},{value:"Linearizible clock test",id:"linearizible-clock-test",level:2},{value:"Open time instrument",id:"open-time-instrument",level:2},{value:"Usage",id:"usage",level:3}],f={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"experimental-software"},"Experimental Software"),(0,o.kt)("h2",{id:"diffphc"},"DiffPHC"),(0,o.kt)("p",null,"DiffPHC is a tool that allows you to measure the difference between two or multiple PHCs of the system."),(0,o.kt)("h2",{id:"linearizible-clock-test"},"Linearizible clock test"),(0,o.kt)("p",null,"This is a vanilla program that tests the true clocks. It is by no means mature, yet. It only depends on the C++11 features and no extra packages are needed(e.g. thrift, etc.) The OSS socket library from ",(0,o.kt)("a",{parentName:"p",href:"https://cs.baylor.edu/~donahoo/practical/CSockets/practical/"},"https://cs.baylor.edu/~donahoo/practical/CSockets/practical/")," are copied and modified for our needs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," the original socket library does not support IPv6. Currently, efforts are only made to support IPv6 for UDP sockets."),(0,o.kt)("h2",{id:"open-time-instrument"},"Open time instrument"),(0,o.kt)("p",null,"This software is a modified version of testptp. It uses the timestamper inputs of the Time Card to read PPS timestamps from the Time Card, and outputs TIE measurements in a format recognized by Calnex CAT."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Enable the Time Card SMAs as Timestamper inputs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"echo IN: TS1 >> /sys/class/timecard/ocp0/sma1\necho IN: TS2 >> /sys/class/timecard/ocp0/sma2\necho IN: TS3 >> /sys/class/timecard/ocp0/sma3\necho IN: TS4 >> /sys/class/timecard/ocp0/sma4\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Build this tool")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"make\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Run this application using the ptp device for the Time Card")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"./OpenTimeInstrument -d /dev/ptp1 -e -1\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Log results are made as .log files, one log per channel.")))}m.isMDXComponent=!0}}]);