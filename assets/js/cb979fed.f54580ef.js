"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[139],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return u}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(r),u=n,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||i;return r?a.createElement(f,o(o({ref:t},d),{},{components:r})):a.createElement(f,o({ref:t},d))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8886:function(e,t,r){r.r(t),r.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=["components"],l={sidebar_position:1},s="The Firmware Tool",c={unversionedId:"software/tft",id:"software/tft",title:"The Firmware Tool",description:"This is a simple tool to add a header to a raw firmware binary. The header is used by a driver to check if the hardware is compatible with the image. The header is only 16 bytes long and contains a PCI Vendor ID, a PCI Device ID and a PCI Hardware Revision ID values to check. It also contains the CRC value of the raw image. The reason to add a header is to be sure that incompatible firware will not be written to the device via devlink unintentionally.",source:"@site/docs/software/tft.md",sourceDirName:"software",slug:"/software/tft",permalink:"/Time-Appliance-Project/docs/software/tft",draft:!1,editUrl:"https://github.com/opencomputeproject/Time-Appliance-Project/tree/master/website/docs/software/tft.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Software",permalink:"/Time-Appliance-Project/docs/category/software"},next:{title:"Clientgen",permalink:"/Time-Appliance-Project/docs/software/clientgen"}},d={},p=[{value:"Header format",id:"header-format",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2}],m={toc:p};function u(e){var t=e.components,r=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"the-firmware-tool"},"The Firmware Tool"),(0,i.kt)("p",null,"This is a simple tool to add a header to a raw firmware binary. The header is used by a driver to check if the hardware is compatible with the image. The header is only 16 bytes long and contains a PCI Vendor ID, a PCI Device ID and a PCI Hardware Revision ID values to check. It also contains the CRC value of the raw image. The reason to add a header is to be sure that incompatible firware will not be written to the device via devlink unintentionally."),(0,i.kt)("h2",{id:"header-format"},"Header format"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Magic Bytes"),(0,i.kt)("th",{parentName:"tr",align:"center"},"PCI Vendor ID"),(0,i.kt)("th",{parentName:"tr",align:"center"},"PCI Device ID"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Image size"),(0,i.kt)("th",{parentName:"tr",align:"center"},"HW Rev ID"),(0,i.kt)("th",{parentName:"tr",align:"center"},"CRC16"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"4 bytes"),(0,i.kt)("td",{parentName:"tr",align:"center"},"2 bytes"),(0,i.kt)("td",{parentName:"tr",align:"center"},"2 bytes"),(0,i.kt)("td",{parentName:"tr",align:"center"},"4 bytes"),(0,i.kt)("td",{parentName:"tr",align:"center"},"2 bytes"),(0,i.kt)("td",{parentName:"tr",align:"center"},"2 bytes")))),(0,i.kt)("p",null,"The firmware header consists 6 fields, all values are network order to be consistent across architectures:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Magic header (4 bytes, 32 bits) - constant value, \u2018OCTC\u2019 means Open Compute Time Card"),(0,i.kt)("li",{parentName:"ol"},"PCI Vendor ID (2 bytes, 16 bits) - PCI device vendor ID compatible with this image"),(0,i.kt)("li",{parentName:"ol"},"PCI Device ID (2 bytes, 16 bits) - PCI device ID compatible with this image"),(0,i.kt)("li",{parentName:"ol"},"Image size (4 bytes, 32 bits, unsigned) - size of firmware itself without header (and footer should we have one)"),(0,i.kt)("li",{parentName:"ol"},"HW Revision (2 bytes, 16 bits) - Information provided by HW register to differentiate revisions of the same board"),(0,i.kt)("li",{parentName:"ol"},"CRC16 (2 bytes, 16 bits) - check value of CRC16 implementation with default polynom implemented in kernel")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The tool has several options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-input <filename>")," - Mandatory option, provides a file name of a raw binary."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-output <filename>")," - Mandatory option, provides a file name to write a new firmware file with header. If file already exists it will be overwritten."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-vendor <int>")," - Mandatory option, provides a PCI Vendor ID to add to header."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-device <int>")," - Mandatory option, provides a PCI Device ID to add to header."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-hw <int>")," - Optional, used to provide a PCI Hardware Rev ID. Default is 0."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-apply")," - Optional. This is used to actually create a new (or overwrite) output file with the header in the beginning.")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./tft -input Time-Card/FPGA/Binary/Production/Binaries/TimeCardProduction.bin -output TimeCardProduction_Celestica.bin -vendor 0x18d4 -device 0x1008 -apply\n")),(0,i.kt)("p",null,"This call will create ",(0,i.kt)("inlineCode",{parentName:"p"},"TimeCardProduction_Celestica.bin")," with header for timecard produced by Celestica."))}u.isMDXComponent=!0}}]);