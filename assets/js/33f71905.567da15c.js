"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1493:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={sidebar_position:3},p="Usage",s={unversionedId:"time-card/usage",id:"time-card/usage",title:"Usage",description:"Time Card is interfaced via sysfs.",source:"@site/docs/time-card/usage.md",sourceDirName:"time-card",slug:"/time-card/usage",permalink:"/docs/time-card/usage",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Raspberry Pi Compute Module",permalink:"/docs/time-card/kernel/kernel-raspi-installation"},next:{title:"Advanced Usage",permalink:"/docs/time-card/advanced-usage"}},u={},c=[{value:"Sysfs",id:"sysfs",level:3},{value:"Serial ports and PHC number",id:"serial-ports-and-phc-number",level:3},{value:"Using Time Card IO",id:"using-time-card-io",level:2},{value:"Ouputs",id:"ouputs",level:3},{value:"Inputs",id:"inputs",level:3},{value:"Configure SMA ports",id:"configure-sma-ports",level:4},{value:"Download <code>testptp</code> source",id:"download-testptp-source",level:4},{value:"Read timestamped signals",id:"read-timestamped-signals",level:4}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Time Card is interfaced via ",(0,i.kt)("inlineCode",{parentName:"p"},"sysfs"),"."),(0,i.kt)("h3",{id:"sysfs"},"Sysfs"),(0,i.kt)("p",null,"To view all the ",(0,i.kt)("inlineCode",{parentName:"p"},"sysfs")," parameters exposed,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ls /sys/class/timecard/ocp0/\n")),(0,i.kt)("p",null,"Additional Time Card devices will enumerate as ",(0,i.kt)("inlineCode",{parentName:"p"},"ocpN")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," is the device order."),(0,i.kt)("h3",{id:"serial-ports-and-phc-number"},"Serial ports and PHC number"),(0,i.kt)("p",null,"Serial ports and PHC number can be found via ",(0,i.kt)("inlineCode",{parentName:"p"},"dmesg")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ls -l")),(0,i.kt)("h2",{id:"using-time-card-io"},"Using Time Card IO"),(0,i.kt)("h3",{id:"ouputs"},"Ouputs"),(0,i.kt)("p",null,"All possible outputs are available via ",(0,i.kt)("inlineCode",{parentName:"p"},"available_sma_outputs"),","),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cat available_sma_outputs\n")),(0,i.kt)("p",null,"Will display all possible output types such as,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"10Mhz PHC MAC GNSS1 GNSS2 IRIG DCF GEN1 GEN2 GEN3 GEN4 GND VCC\n")),(0,i.kt)("p",null,"A few examples are shown below for configuring the output signals,"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Output FPGA PPS on SMA")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"echo OUT: PHC >> sma1\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Output Atomic clock PPS on SMA")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"echo OUT: MAC >> sma1\n")),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"Output GPS Module's PPS on SMA")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"echo OUT: GNSS1 >> sma1\n")),(0,i.kt)("h3",{id:"inputs"},"Inputs"),(0,i.kt)("p",null,"All possible inputs are available via ",(0,i.kt)("inlineCode",{parentName:"p"},"available_sma_inputs"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cat available_sma_inputs\n")),(0,i.kt)("p",null,"Will display all possible inputs types such as,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"10Mhz PPS1 PPS2 TS1 TS2 IRIG DCF TS3 TS4 FREQ1 FREQ2 FREQ3 FREQ4 None\n")),(0,i.kt)("p",null,"A few examples are shown below for configuring the input signals,"),(0,i.kt)("h4",{id:"configure-sma-ports"},"Configure SMA ports"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Use a port for time-stamping incoming signals, this configured ",(0,i.kt)("inlineCode",{parentName:"li"},"SMA1")," with timestamper-1 ",(0,i.kt)("inlineCode",{parentName:"li"},"TS1"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"echo IN: TS1 >> sma1\n")),(0,i.kt)("p",null,"To read back the timestamped signals, use ",(0,i.kt)("inlineCode",{parentName:"p"},"testptp"),"."),(0,i.kt)("h4",{id:"download-testptp-source"},"Download ",(0,i.kt)("inlineCode",{parentName:"h4"},"testptp")," source"),(0,i.kt)("p",null,"Source available at these locations"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.mjmwired.net/kernel/Documentation/ptp/testptp.c"},"https://www.mjmwired.net/kernel/Documentation/ptp/testptp.c")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/torvalds/linux/blob/master/tools/testing/selftests/ptp/testptp.c"},"https://github.com/torvalds/linux/blob/master/tools/testing/selftests/ptp/testptp.c"))),(0,i.kt)("h4",{id:"read-timestamped-signals"},"Read timestamped signals"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note: ")," ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," for inifite readings, use a positive number for fixed event count, from ",(0,i.kt)("inlineCode",{parentName:"p"},"Timestamper 1")," ",(0,i.kt)("inlineCode",{parentName:"p"},"-i 1")," from the Time Card ",(0,i.kt)("inlineCode",{parentName:"p"},"/dev/ptp1")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./testptp -d /dev/ptp1 -e -1 -i 1\n")))}m.isMDXComponent=!0}}]);